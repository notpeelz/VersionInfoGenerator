<Project>
  <Import Project="$(MSBuildThisFileDirectory)/EventCodes.props" />

  <Import Project="$(MSBuildProjectDirectory)/VersionInfoGenerator.Config.props"
    Condition="Exists('$(MSBuildProjectDirectory)/VersionInfoGenerator.Config.props')" />

  <!-- Back up the user-defined ProjectVersion before
       NuGet.Build.Tasks.Pack.targets overrides it -->
  <PropertyGroup>
    <_PackageVersion>$(PackageVersion)</_PackageVersion>
  </PropertyGroup>

  <Target Name="VersionInfoGenerator_GetGitBinary">
    <Exec Command="git --version"
      Condition="'$(GitBinary)' == ''"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      CustomErrorRegularExpression="error|fatal"
      IgnoreExitCode="true">
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>

    <!-- Use git from PATH if possible (cross-platform) -->
    <PropertyGroup Condition="'$(GitBinary)' == '' And '$(MSBuildLastExitCode)' == '0'">
      <GitBinary>git</GitBinary>
    </PropertyGroup>

    <!-- Windows-specific fallbacks -->
    <PropertyGroup Condition="'$(GitBinary)' == '' And '$(OS)' == 'Windows_NT'">
      <GitBinary Condition="'$(GitBinary)' == '' And Exists('C:\Program Files\Git\bin\git.exe')">"C:\Program Files\Git\bin\git.exe"</GitBinary>
      <GitBinary Condition="'$(GitBinary)' == '' And Exists('C:\Program Files (x86)\Git\bin\git.exe')">"C:\Program Files (x86)\Git\bin\git.exe"</GitBinary>
      <GitBinary Condition="'$(GitBinary)' == '' And Exists('C:\msysgit\bin\git.exe')">C:\msysgit\bin\git.exe</GitBinary>
    </PropertyGroup>

    <Error
      Condition="'$(GitBinary)' == ''"
      Code="$(_VIG_GIT_BINARY_MISSING)"
      Text="Failed to locate the git binary." />
  </Target>

  <Target Name="VersionInfoGenerator_VerifyGitWorktree" DependsOnTargets="VersionInfoGenerator_GetGitBinary">
    <!-- Verify that we're in a git repo -->
    <Exec
      Command="$(GitBinary) rev-parse --is-inside-work-tree"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitIsInWorktree" TaskParameter="ConsoleOutput" />
    </Exec>

    <!-- Verify that we're in a valid git worktree -->
    <Exec
      Condition="'$(GitIsInWorktree)' == 'true'"
      Command="$(GitBinary) rev-list -n 1 --all"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitIsWorktreeValid" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <PropertyGroup>
      <GitIsWorktreeValid Condition="'$(GitIsWorktreeValid)' == '' Or '$(MSBuildLastExitCode)' != '0'">false</GitIsWorktreeValid>
      <GitIsWorktreeValid Condition="'$(GitIsWorktreeValid)' != 'false'">true</GitIsWorktreeValid>
    </PropertyGroup>

    <!-- Verify that HEAD is a valid revision -->
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) rev-parse --verify HEAD"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <GitIsWorktreeValid Condition="'$(MSBuildLastExitCode)' != '0'">false</GitIsWorktreeValid>
    </PropertyGroup>
  </Target>

  <Target Name="VersionInfoGenerator_GetGitInfo" DependsOnTargets="VersionInfoGenerator_VerifyGitWorktree">
    <!-- GitRevShort -->
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) describe --long --always --dirty --exclude=* --abbrev=7"
      EchoOff="true"
      StandardOutputImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitRevShort" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error
      Condition="'$(GitIsWorktreeValid)' == 'true' And '$(MSBuildLastExitCode)' != '0'"
      Code="$(_VIG_GIT_REV_SHORT_FAILED_PARSING)"
      Text="Failed to parse GitRevShort: $(GitRevShort)" />

    <!-- GitRevLong -->
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) describe --long --always --dirty --exclude=* --abbrev=9999"
      EchoOff="true"
      StandardOutputImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitRevLong" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error
      Condition="'$(GitIsWorktreeValid)' == 'true' And '$(MSBuildLastExitCode)' != '0'"
      Code="$(_VIG_GIT_REV_LONG_FAILED_PARSING)"
      Text="Failed to parse GitRevLong: $(GitRevLong)" />

    <!-- GitBranch -->
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) rev-parse --abbrev-ref --symbolic-full-name HEAD"
      EchoOff="true"
      StandardOutputImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitBranch" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error
      Condition="'$(GitIsWorktreeValid)' == 'true' And '$(MSBuildLastExitCode)' != '0'"
      Code="$(_VIG_GIT_BRANCH_FAILED_PARSING)"
      Text="Failed to parse GitBranch: $(GitBranch)" />

    <!-- GitTag -->
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) describe --tags --abbrev=0"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitTag" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <!-- Clear GitTag if the command errored out as it contains the command's stderr -->
      <GitTag Condition="'$(MSBuildLastExitCode)' != '0'"></GitTag>
    </PropertyGroup>

    <!-- GitCommitsSinceTag -->
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true' And '$(GitTag)' != ''"
      Command="$(GitBinary) rev-list &quot;$(GitTag)&quot;.. --count"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitCommitsSinceTag" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error
      Condition="'$(GitIsWorktreeValid)' == 'true' And '$(GitTag)' != '' And '$(MSBuildLastExitCode)' != '0'"
      Code="$(_VIG_GIT_COMMITS_SINCE_TAG_FAILED_PARSING)"
      Text="Failed to parse GitCommitsSinceTag: $(GitCommitsSinceTag)" />

    <!-- GitIsDirty -->
    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <GitIsDirty>$(GitRevShort.Contains('-dirty'))</GitIsDirty>
    </PropertyGroup>
  </Target>

  <Target
    Condition="'$(BuildingProject)' == 'true'"
    Name="VersionInfoGenerator_UpdateProperties"
    DependsOnTargets="VersionInfoGenerator_GetGitInfo"
    BeforeTargets="ResolveReferences">
    <PropertyGroup>
      <_VersionRegex><![CDATA[^([1-9]\d*|0).([1-9]\d*|0).([1-9]\d*|0)$]]></_VersionRegex>
    </PropertyGroup>

    <Error
      Condition="!$([System.Text.RegularExpressions.Regex]::IsMatch('$(Version)', '$(_VersionRegex)'))"
      Code="$(_VIG_VERSION_INVALID_FORMAT)"
      Text="Version does not respect the Major.Minor.Patch format: $(Version)" />

    <PropertyGroup>
      <SemVer>$(Version)</SemVer>
      <SemVer Condition="'$(VersionPrerelease)' != ''">$(SemVer)-$(VersionPrerelease)</SemVer>
    </PropertyGroup>

    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <VersionMetadata>$(VersionMetadata
        .Replace('@@GitRevShort@@', '$(GitRevShort)')
        .Replace('@@GitRevLong@@', '$(GitRevLong)')
        .Replace('@@GitTag@@', '$(GitTag)')
        .Replace('@@GitCommitsSinceTag@@', '$(GitCommitsSinceTag)')
        .Replace('@@GitBranch@@', '$(GitBranch)'))</VersionMetadata>
    </PropertyGroup>

    <PropertyGroup>
      <_VersionMetadata Condition="'$(GitIsWorktreeValid)' == 'true'">git$(GitRevShort)-$(GitBranch)</_VersionMetadata>
      <_VersionMetadata Condition="'$(GitIsWorktreeValid)' != 'true'">untracked</_VersionMetadata>
      <VersionMetadata Condition="'$(GitIsWorktreeValid)' == 'true' And '$(VersionMetadata)' == ''">@@VersionMetadata@@</VersionMetadata>
      <VersionMetadata>$(VersionMetadata.Replace('@@VersionMetadata@@', '$(_VersionMetadata)'))</VersionMetadata>
    </PropertyGroup>

    <PropertyGroup Condition="'$(VersionInfoUseMetadata)' != 'false'">
      <SemVer Condition="'$(VersionMetadata)' != ''">$(SemVer)+$(VersionMetadata)</SemVer>
    </PropertyGroup>

    <!-- Override RepositoryXXX properties -->
    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true' And '$(RepositoryUrl)' != '' And '$(VersionInfoOverrideRepositoryInfo)' != 'false'">
      <RepositoryCommit Condition="'$(RepositoryCommit)' == '' And '$(GitIsDirty)' == 'false'">$(GitRevLong)</RepositoryCommit>
      <RepositoryBranch Condition="'$(RepositoryBranch)' == ''">$(GitBranch)</RepositoryBranch>
    </PropertyGroup>

    <!-- Override package version -->
    <PropertyGroup Condition="'$(VersionInfoOverridePackageVersion)' != 'false'">
      <PackageVersion Condition="'$(_PackageVersion)' == ''">$(SemVer)</PackageVersion>
    </PropertyGroup>

    <!-- Override assembly versions -->
    <PropertyGroup Condition="'$(VersionInfoOverrideVersions)' != 'false'">
      <FileVersion Condition="'$(FileVersion)' == ''">$(Version)</FileVersion>
      <InformationalVersion Condition="'$(InformationalVersion)' == ''">@@SemVer@@</InformationalVersion>
    </PropertyGroup>

    <PropertyGroup>
      <InformationalVersion>$(InformationalVersion
        .Replace('@@Version@@', '$(Version)')
        .Replace('@@VersionPrerelease@@', '$(VersionPrerelease)')
        .Replace('@@VersionMetadata@@', '$(VersionMetadata)')
        .Replace('@@SemVer@@', '$(SemVer)')
        .Replace('@@GitRevShort@@', '$(GitRevShort)')
        .Replace('@@GitRevLong@@', '$(GitRevLong)')
        .Replace('@@GitTag@@', '$(GitTag)')
        .Replace('@@GitCommitsSinceTag@@', '$(GitCommitsSinceTag)')
        .Replace('@@GitBranch@@', '$(GitBranch)'))</InformationalVersion>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <CompilerVisibleProperty Include="BuildingProject" />
    <CompilerVisibleProperty Include="RootNamespace" />
    <CompilerVisibleProperty Include="VersionInfoGenerateClass" />
    <CompilerVisibleProperty Include="VersionInfoClassSerializedProperties" />
    <CompilerVisibleProperty Include="VersionInfoClassNamespace" />
    <CompilerVisibleProperty Include="VersionInfoClassNamespaceGlobal" />
    <CompilerVisibleProperty Include="VersionInfoClassName" />
    <CompilerVisibleProperty Include="VersionInfoClassModifiers" />
    <CompilerVisibleProperty Include="Version" />
    <CompilerVisibleProperty Include="VersionPrerelease" />
    <CompilerVisibleProperty Include="VersionMetadata" />
    <CompilerVisibleProperty Include="SemVer" />
    <CompilerVisibleProperty Include="GitRevShort" />
    <CompilerVisibleProperty Include="GitRevLong" />
    <CompilerVisibleProperty Include="GitBranch" />
    <CompilerVisibleProperty Include="GitTag" />
    <CompilerVisibleProperty Include="GitCommitsSinceTag" />
    <CompilerVisibleProperty Include="GitIsDirty" />
  </ItemGroup>

  <Import Project="$(MSBuildThisFileDirectory)/VersionInfoGenerator.JsonTask.targets" />
</Project>

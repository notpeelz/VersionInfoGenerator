<Project>
  <Import Project="$(MSBuildProjectDirectory)/VersionInfoGenerator.Config.props"
    Condition="Exists('$(MSBuildProjectDirectory)/VersionInfoGenerator.Config.props')" />

  <Import Project="$(MSBuildThisFileDirectory)/VersionInfoGenerator.JsonTask.targets" />

  <Target Name="VersionInfoGenerator_GetGitBinary">
    <Exec Command="git --version"
      Condition="'$(GitBinary)' == ''"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      CustomErrorRegularExpression="error|fatal"
      IgnoreExitCode="true">
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>

    <!-- Use git from PATH if possible (cross-platform) -->
    <PropertyGroup Condition="'$(GitBinary)' == '' And '$(MSBuildLastExitCode)' == '0'">
      <GitBinary>git</GitBinary>
    </PropertyGroup>

    <!-- Windows-specific fallbacks -->
    <PropertyGroup Condition="'$(GitBinary)' == '' And '$(OS)' == 'Windows_NT'">
      <GitBinary Condition="'$(GitBinary)' == '' And Exists('C:\Program Files\Git\bin\git.exe')">"C:\Program Files\Git\bin\git.exe"</GitBinary>
      <GitBinary Condition="'$(GitBinary)' == '' And Exists('C:\Program Files (x86)\Git\bin\git.exe')">"C:\Program Files (x86)\Git\bin\git.exe"</GitBinary>
      <GitBinary Condition="'$(GitBinary)' == '' And Exists('C:\msysgit\bin\git.exe')">C:\msysgit\bin\git.exe</GitBinary>
    </PropertyGroup>

    <Error Condition="'$(GitBinary)' == ''" Text="Failed to locate the git binary." />
  </Target>

  <Target Name="VersionInfoGenerator_VerifyGitWorktree" DependsOnTargets="VersionInfoGenerator_GetGitBinary">
    <Exec
      Command="$(GitBinary) rev-parse --is-inside-work-tree"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitIsInWorktree" TaskParameter="ConsoleOutput" />
    </Exec>
    <Exec
      Condition="'$(GitIsInWorktree)' == 'true'"
      Command="$(GitBinary) rev-list -n 1 --all"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitIsWorktreeValid" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <PropertyGroup>
      <GitIsWorktreeValid Condition="'$(GitIsWorktreeValid)' == '' Or '$(MSBuildLastExitCode)' != '0'">false</GitIsWorktreeValid>
      <GitIsWorktreeValid Condition="'$(GitIsWorktreeValid)' != 'false'">true</GitIsWorktreeValid>
    </PropertyGroup>
  </Target>

  <Target Name="VersionInfoGenerator_GetGitInfo" DependsOnTargets="VersionInfoGenerator_VerifyGitWorktree">
    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) describe --long --always --dirty --exclude=* --abbrev=7"
      EchoOff="true"
      StandardOutputImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitRevShort" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error Condition="'$(GitIsWorktreeValid)' == 'true' And '$(MSBuildLastExitCode)' != '0'" Text="Failed to parse GitRevShort: $(GitRevShort)" />

    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) describe --long --always --dirty --exclude=* --abbrev=9999"
      EchoOff="true"
      StandardOutputImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitRevLong" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error Condition="'$(GitIsWorktreeValid)' == 'true' And '$(MSBuildLastExitCode)' != '0'" Text="Failed to parse GitRevLong: $(GitRevLong)" />

    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) rev-parse --abbrev-ref --symbolic-full-name HEAD"
      EchoOff="true"
      StandardOutputImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitBranch" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <Error Condition="'$(GitIsWorktreeValid)' == 'true' And '$(MSBuildLastExitCode)' != '0'" Text="Failed to parse GitBranch: $(GitBranch)" />

    <Exec
      Condition="'$(GitIsWorktreeValid)' == 'true'"
      Command="$(GitBinary) describe --tags --abbrev=0"
      EchoOff="true"
      StandardOutputImportance="low"
      StandardErrorImportance="low"
      IgnoreStandardErrorWarningFormat="true"
      ConsoleToMSBuild="true"
      IgnoreExitCode="true">
      <Output PropertyName="GitTag" TaskParameter="ConsoleOutput" />
      <Output PropertyName="MSBuildLastExitCode" TaskParameter="ExitCode" />
    </Exec>
    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <!-- Delete GitTag if the command errored out as it contains the command's stderr -->
      <GitTag Condition="'$(MSBuildLastExitCode)' != '0'"></GitTag>
    </PropertyGroup>

    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <GitIsDirty>$(GitRevShort.Contains('-dirty'))</GitIsDirty>
    </PropertyGroup>
  </Target>

  <Target Name="VersionInfoGenerator_UpdateProperties" DependsOnTargets="VersionInfoGenerator_GetGitInfo" BeforeTargets="BuildOnlySettings;GenerateNuspec">
    <PropertyGroup>
      <SemVer>$(Version)</SemVer>
      <SemVer Condition="'$(VersionPrerelease)' != ''">$(SemVer)-$(VersionPrerelease)</SemVer>
    </PropertyGroup>

    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true'">
      <Version>$(Version
        .Replace('@@GitRevShort@@', '$(GitRevShort)')
        .Replace('@@GitRevLong@@', '$(GitRevLong)')
        .Replace('@@GitTag@@', '$(GitTag)')
        .Replace('@@GitBranch@@', '$(GitBranch)'))</Version>
      <VersionPrerelease>$(VersionPrerelease
        .Replace('@@GitRevShort@@', '$(GitRevShort)')
        .Replace('@@GitRevLong@@', '$(GitRevLong)')
        .Replace('@@GitTag@@', '$(GitTag)')
        .Replace('@@GitBranch@@', '$(GitBranch)'))</VersionPrerelease>
      <VersionMetadata>$(VersionMetadata
        .Replace('@@GitRevShort@@', '$(GitRevShort)')
        .Replace('@@GitRevLong@@', '$(GitRevLong)')
        .Replace('@@GitTag@@', '$(GitTag)')
        .Replace('@@GitBranch@@', '$(GitBranch)'))</VersionMetadata>
    </PropertyGroup>

    <PropertyGroup>
      <_VersionMetadata Condition="'$(GitIsWorktreeValid)' == 'true'">git$(GitRevShort)-$(GitBranch)</_VersionMetadata>
      <_VersionMetadata Condition="'$(GitIsWorktreeValid)' != 'true'">untracked</_VersionMetadata>
      <VersionMetadata Condition="'$(GitIsWorktreeValid)' == 'true' And '$(VersionMetadata)' == ''">@@VersionMetadata@@</VersionMetadata>
      <VersionMetadata>$(VersionMetadata.Replace('@@VersionMetadata@@', '$(_VersionMetadata)'))</VersionMetadata>
    </PropertyGroup>

    <PropertyGroup Condition="'$(UseVersionMetadata)' != 'false'">
      <SemVer Condition="'$(VersionMetadata)' != ''">$(SemVer)+$(VersionMetadata)</SemVer>
    </PropertyGroup>

    <!-- Override RepositoryXXX properties -->
    <PropertyGroup Condition="'$(GitIsWorktreeValid)' == 'true' And '$(RepositoryUrl)' != '' And '$(OverrideRepositoryInfo)' != 'false'">
      <RepositoryCommit Condition="'$(RepositoryCommit)' == '' And '$(GitIsDirty)' == 'false'">$(GitRevLong)</RepositoryCommit>
      <RepositoryBranch Condition="'$(RepositoryBranch)' == ''">$(GitBranch)</RepositoryBranch>
    </PropertyGroup>

    <!-- Override assembly version properties -->
    <PropertyGroup Condition="'$(OverrideProjectVersion)' != 'false'">
      <AssemblyVersion>$(Version)</AssemblyVersion>
      <FileVersion>$(Version)</FileVersion>
      <InformationalVersion>@@SemVer@@</InformationalVersion>
    </PropertyGroup>

    <PropertyGroup>
      <InformationalVersion>$(InformationalVersion
        .Replace('@@Version@@', '$(Version)')
        .Replace('@@VersionPrerelease@@', '$(VersionPrerelease)')
        .Replace('@@VersionMetadata@@', '$(VersionMetadata)')
        .Replace('@@SemVer@@', '$(SemVer)')
        .Replace('@@GitRevShort@@', '$(GitRevShort)')
        .Replace('@@GitRevLong@@', '$(GitRevLong)')
        .Replace('@@GitTag@@', '$(GitTag)')
        .Replace('@@GitBranch@@', '$(GitBranch)'))</InformationalVersion>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <CompilerVisibleProperty Include="RootNamespace" />
    <CompilerVisibleProperty Include="VersionInfoGenerateClass" />
    <CompilerVisibleProperty Include="VersionInfoClassSerializedProperties" />
    <CompilerVisibleProperty Include="VersionInfoClassNamespace" />
    <CompilerVisibleProperty Include="VersionInfoClassNamespaceGlobal" />
    <CompilerVisibleProperty Include="VersionInfoClassName" />
    <CompilerVisibleProperty Include="VersionInfoClassModifiers" />
    <CompilerVisibleProperty Include="Version" />
    <CompilerVisibleProperty Include="VersionPrerelease" />
    <CompilerVisibleProperty Include="VersionMetadata" />
    <CompilerVisibleProperty Include="SemVer" />
    <CompilerVisibleProperty Include="GitRevShort" />
    <CompilerVisibleProperty Include="GitRevLong" />
    <CompilerVisibleProperty Include="GitBranch" />
    <CompilerVisibleProperty Include="GitTag" />
    <CompilerVisibleProperty Include="GitIsDirty" />
  </ItemGroup>
</Project>
